package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"graphql/graph/model"
)

// CreateCategory is the resolver for the CreateCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, input model.NewCategory) (*model.Category, error) {
	category, err := r.CategoryDB.Create(input.Name, *input.Description)
	if err != nil {
		return nil, err
	}
	return &model.Category{
		IDCategory:  category.Id,
		Name:        category.Name,
		Description: &category.Description,
	}, nil
}

// CreateCourse is the resolver for the CreateCourse field.
func (r *mutationResolver) CreateCourse(ctx context.Context, input model.NewCourse) (*model.Course, error) {
	panic(fmt.Errorf("not implemented: CreateCourse - CreateCourse"))
}

// Category is the resolver for the Category field.
func (r *queryResolver) Category(ctx context.Context) ([]*model.Category, error) {
	category, err := r.CategoryDB.Query()
	if err != nil {
		return nil, err
	}
	var categoriesModel []*model.Category
	for _, Category := range category {
		categoriesModel = append(categoriesModel, &model.Category{
			IDCategory: Category.Id,
			Name:       Category.Name,
		})
	}
}

// Course is the resolver for the Course field.
func (r *queryResolver) Course(ctx context.Context) ([]*model.Course, error) {
	panic(fmt.Errorf("not implemented: Course - Course"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
